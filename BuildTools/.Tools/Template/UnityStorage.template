/************************************************
 * Storage class : {{className}}
 * This file is can not be modify !!!
 * If there is some problem, ask bin.guo.
 ************************************************/

using System;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;

namespace DragonU3DSDK.Storage
{
    [System.Serializable]
    public class {{className}} : StorageBase
    {
        {{#each fieldArray}}{{#if this.isNormalType}}
        // {{this.desc}}
        [JsonProperty]
        {{this.realType}} {{this.fieldName}}{{#if this.isString}} = ""{{/if}};
        [JsonIgnore]
        public {{this.realType}} {{this.getterName}}
        {
            get
            {
                return {{this.fieldName}};
            }
            set
            {
                if({{this.fieldName}} != value)
                {
                    {{this.fieldName}} = value;
                    StorageManager.Instance.LocalVersion++;
                    {{#if this.syncForce}}StorageManager.Instance.SyncForce = true;{{/if}}
                    {{#if this.syncForceRemote}}StorageManager.Instance.SyncForceRemote = true;{{/if }}
                }
            }
        }
        // ---------------------------------//
        {{/if}}{{# if this.isListNormalType}}
        // {{this.desc}}
        [JsonProperty]
        {{{this.realType}}} {{this.fieldName}} = new {{{this.realType}}}({{#if this.syncForce}}true{{/if}}{{#if this.syncForceRemote}}, true{{/if}});
        [JsonIgnore]
        public {{{this.realType}}} {{this.getterName}}
        {
            get
            {
                return {{this.fieldName}};
            }
        }
        // ---------------------------------//
        {{/if}}{{# if this.isDictionaryNormalType}}
        // {{this.desc}}
        [JsonProperty]
        {{{this.realType}}} {{this.fieldName}} = new {{{this.realType}}}({{#if this.syncForce}}true{{/if}}{{#if this.syncForceRemote}}, true{{/if}});
        [JsonIgnore]
        public {{{this.realType}}} {{this.getterName}}
        {
            get
            {
                return {{this.fieldName}};
            }
        }
        // ---------------------------------//
        {{/if}}{{# if this.isStorageType}}
        // {{this.desc}}
        [JsonProperty]
        {{this.realType}} {{this.fieldName}} = new {{this.realType}}();
        [JsonIgnore]
        public {{this.realType}} {{this.getterName}}
        {
            get
            {
                return {{this.fieldName}};
            }
        }
        // ---------------------------------//
        {{/if}}{{#if this.isListStorageType}}
        // {{this.desc}}
        [JsonProperty]
        {{{this.realType}}} {{this.fieldName}} = new {{{this.realType}}}({{#if this.syncForce}}true{{/if}}{{#if this.syncForceRemote}}, true{{/if}});
        [JsonIgnore]
        public {{{this.realType}}} {{this.getterName}}
        {
            get
            {
                return {{this.fieldName}};
            }
        }
        // ---------------------------------//
        {{/if}}{{#if this.isDictionaryStorageType}} 
        // {{this.desc}}
        [JsonProperty]
        {{{this.realType}}} {{this.fieldName}} = new {{{this.realType}}}({{#if this.syncForce}}true{{/if}}{{#if this.syncForceRemote}}, true{{/if}});
        [JsonIgnore]
        public {{{this.realType}}} {{this.getterName}}
        {
            get
            {
                return {{this.fieldName}};
            }
        }
        // ---------------------------------//
        {{/if}}{{#if this.isProtectedValue}} 
        // {{this.desc}}
        [JsonProperty]
        float _vc0;
        [JsonProperty]
        int _vc1;

        public void SetValue(int value)
        {
            if (GetValue() == value)
            {
                return;
            }
            if(value <= 0)
            {
                _vc0 = 0.0f;
                _vc1 = 0;
            }
            else
            {
                _vc1 = (int)Math.Floor(UnityEngine.Random.Range(0.0f, 1.0f) * value);
                _vc0 = (value - _vc1) / 8.0f;
            }
            StorageManager.Instance.LocalVersion++;
            {{#if this.syncForce}}StorageManager.Instance.SyncForce = true;{{/if}}
            {{#if this.syncForceRemote}}StorageManager.Instance.SyncForceRemote = true;{{/if}}
        }

        public int GetValue()
        {
            return (int)Math.Round(8.0f * _vc0 + _vc1);
        }
        // ---------------------------------//
        {{/if}}{{/each}}
    }
}