/******************************************************************************
 * {{managerName}}
 *
 * Auto Generate File, Do NOT Modify!!!!!!!!!!!!!!!
 *****************************************************************************/

using System.IO;
using System.Collections.Generic;
using UnityEngine;

[System.Serializable]
public class {{managerName}}
{
   	public static List<T> DeSerialize<T>(string json)
    {
        if (!json.StartsWith("{", System.StringComparison.Ordinal))
        {
            json = "{\"v\":" + json + "}";
        }

        WrapperList<T> list = JsonUtility.FromJson<WrapperList<T>>(json);
        return list.v;
    }

    [System.Serializable]
    private class WrapperList<T>
    {
        public List<T> v = new List<T>();
    }

	//NOTE: call to init tables
	public static {{managerName}} LoadTables(AssetBundle bundle)
	{
		var manager = new {{managerName}}();
		{{#each classList}}
		manager.m_{{this.className}} = Table{{this.className}}.LoadTable(bundle);
		{{/each}}
		return manager;
	}

	//NOTE: just use in Editor, table store in Resource Folder
	public static {{managerName}} LoadTablesInEditor(string filePath)
	{
		var manager = new {{managerName}}();
		{{#each classList}}
		manager.m_{{this.className}} = Table{{this.className}}.LoadTable(filePath);
		{{/each}}
		return manager;
	}

	public static {{managerName}} LoadTables(Dictionary<string, string> assets)
	{
		var manager = new {{managerName}}();
		{{#each classList}}
		manager.m_{{this.className}} = Table{{this.className}}.LoadTable(assets);
		{{/each}}
		return manager;
	}

	public static List<string> GetTableList()
	{
		List<string> tableList = new List<string> ();
		{{#each classList}}
		tableList.Add (Table{{this.className}}.GetInstanceFile ());
		{{/each}}
		return tableList;
	}

	{{#each classList}}
	private List<Table{{this.className}}> m_{{this.className}} = new List<Table{{this.className}}>();
	public List<Table{{this.className}}> Get{{this.className}}List()
	{
		return m_{{this.className}};
	}
	public Table{{this.className}} Get{{this.className}}ByIndex(int idx)
	{
		if(m_{{this.className}} != null && m_{{this.className}}.Count > idx && idx >= 0)
		{
			return m_{{this.className}}[idx];
		}
 		return null;
 	}
 	public Table{{this.className}} Get{{this.className}}ByID(int id)
	{
		Table{{this.className}} ret = null;
		if(m_{{this.className}} != null)
		{
			ret = m_{{this.className}}.Find((Table{{this.className}} table) =>
			{
				return (table.id == id);
			});
		}
		return ret;
	}
	public Table{{this.className}} Get{{this.className}}(System.Predicate<Table{{this.className}}> condition)
	{
		Table{{this.className}} ret = null;
		if (m_{{this.className}} != null)
		{
			ret = m_{{this.className}}.Find(condition);
		}
		return ret;
	}
 	{{/each}}
}

